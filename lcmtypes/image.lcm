/* Copyright (c) AutoNavi - All Rights Reserved
 * Author: shuo <shuo@alibaba-inc.com>
 * description: lcm type for image
 */

package had;

struct RegionOfInterest
{
	int32_t x_offset;  // Leftmost pixel of the ROI
			 // (0 if the ROI includes the left edge of the image)
	int32_t y_offset;  // Topmost pixel of the ROI
			 // (0 if the ROI includes the top edge of the image)
	int32_t height;    // Height of ROI
	int32_t width;     // Width of ROI

	//True if a distinct rectified ROI should be calculated from the "raw"
	//ROI in this message. Typically this should be False if the full image
	//is captured (ROI not used), and True if a subwindow is captured (ROI
	//used).
	boolean do_rectify;
}

struct CameraInfo
{
	header_t header;

	//#######################################################################
	//#                      Calibration Parameters                         #
	//#######################################################################
	//# These are fixed during camera calibration. Their values will be the #
	//# same in all messages until the camera is recalibrated. Note that    #
	//# self-calibrating systems may "recalibrate" frequently.              #
	//#                                                                     #
	//# The internal parameters can be used to warp a raw (distorted) image #
	//# to:                                                                 #
	//#   1. An undistorted image (requires D and K)                        #
	//#   2. A rectified image (requires D, K, R)                           #
	//# The projection matrix P projects 3D points into the rectified image.#
	//#######################################################################

	//# The image dimensions with which the camera was calibrated. Normally
	//# this will be the full camera resolution in pixels.
	int32_t height;
	int32_t width;

	//# The distortion model used. Supported models are listed in
	//# sensor_msgs/distortion_models.h. For most cameras, "plumb_bob" - a
	//# simple model of radial and tangential distortion - is sufficent. 
	string distortion_model;

	//# The distortion parameters, size depending on the distortion model.
	//# For "plumb_bob", the 5 parameters are: (k1, k2, t1, t2, k3).
    int32_t num_distortParams;
	double D[num_distortParams];

	//# Intrinsic camera matrix for the raw (distorted) images.
	//#     [fx  0 cx]
	//# K = [ 0 fy cy]
	//#     [ 0  0  1]
	//# Projects 3D points in the camera coordinate frame to 2D pixel
	//# coordinates using the focal lengths (fx, fy) and principal point
	//# (cx, cy).
	double K[9];	//# 3x3 row-major matrix

	//# Rectification matrix (stereo cameras only)
	//# A rotation matrix aligning the camera coordinate system to the ideal
	//# stereo image plane so that epipolar lines in both stereo images are
	//# parallel.
	double R[9];  //# 3x3 row-major matrix

	//# Projection/camera matrix
	//#     [fx'  0  cx' Tx]
	//# P = [ 0  fy' cy' Ty]
	//#     [ 0   0   1   0]
	//# By convention, this matrix specifies the intrinsic (camera) matrix
	//#  of the processed (rectified) image. That is, the left 3x3 portion
	//#  is the normal camera intrinsic matrix for the rectified image.
	//# It projects 3D points in the camera coordinate frame to 2D pixel
	//#  coordinates using the focal lengths (fx', fy') and principal point
	//#  (cx', cy') - these may differ from the values in K.
	//# For monocular cameras, Tx = Ty = 0. Normally, monocular cameras will
	//#  also have R = the identity and P[1:3,1:3] = K.
	//# For a stereo pair, the fourth column [Tx Ty 0]' is related to the
	//#  position of the optical center of the second camera in the first
	//#  camera's frame. We assume Tz = 0 so both cameras are in the same
	//#  stereo image plane. The first camera always has Tx = Ty = 0. For
	//#  the right (second) camera of a horizontal stereo pair, Ty = 0 and
	//#  Tx = -fx' * B, where B is the baseline between the cameras.
	//# Given a 3D point [X Y Z]', the projection (x, y) of the point onto
	//#  the rectified image is given by:
	//#  [u v w]' = P * [X Y Z 1]'
	//#         x = u / w
	//#         y = v / w
	//#  This holds for both images of a stereo pair.
	double P[12]; //# 3x4 row-major matrix

	//#######################################################################
	//#                      Operational Parameters                         #
	//#######################################################################
	//# These define the image region actually captured by the camera       #
	//# driver. Although they affect the geometry of the output image, they #
	//# may be changed freely without recalibrating the camera.             #
	//#######################################################################

	//# Binning refers here to any camera setting which combines rectangular
	//#  neighborhoods of pixels into larger "super-pixels." It reduces the
	//#  resolution of the output image to
	//#  (width / binning_x) x (height / binning_y).
	//# The default values binning_x = binning_y = 0 is considered the same
	//#  as binning_x = binning_y = 1 (no subsampling).
	int32_t binning_x;
	int32_t binning_y;

	//# Region of interest (subwindow of full camera resolution), given in
	//#  full resolution (unbinned) image coordinates. A particular ROI
	//#  always denotes the same window of pixels on the camera sensor,
	//#  regardless of binning settings.
	//# The default setting of roi (all values 0) is considered the same as
	//#  full resolution (roi.width = width, roi.height = height).
	RegionOfInterest roi;
}

struct image_type_t
{
    const int8_t RGB8 = 1;
    const int8_t RGB16 = 2;
    const int8_t BGR8 = 3;
    const int8_t BGR16 = 4;
    const int8_t YUV411 = 5;
    const int8_t YUV422 = 6;
    const int8_t YUV444 = 7;
    const int8_t JPEG = 8;
    const int8_t MONO8 = 9;
    const int8_t MONO16 = 10;
    const int8_t PNG = 11;
    int8_t enumerate;
}

struct image_compression_t
{
    const int8_t NONE = 0;
    const int8_t SNAPPY = 1;
    int8_t enumerate;
}

struct image_t
{
    header_t header;
    string coord_frame;

    int32_t height;
    int32_t width;

    int32_t size;
    byte data[size];

    image_type_t type;
    image_compression_t compression;
}

